import math

Write a function using Python and the ImagePatch class (above) that could be executed to provide an answer to the query. 

Consider the following guidelines:
- Use base Python (comparison, sorting) for basic logical operations, left/right/up/down, math, etc.
- The last returning logic (else:) should be simple_query!!!

class ImagePatch:
    """A Python class containing a crop of an image centered around a particular object, as well as relevant information.
    Attributes
    ----------
    cropped_image : array_like
        An array-like of the cropped image taken from the original image.
    left, lower, right, upper : int
        An int describing the position of the (left/lower/right/upper) border of the crop's bounding box in the original image.

    Methods
    -------
    find(object_name: str)->List[ImagePatch]
        Returns a list of new ImagePatch objects containing crops of the image centered around any objects found in the
        image matching the object_name.
    exists(object_name: str)->bool
        Returns True if the object specified by object_name is found in the image, and False otherwise.
    verify_property(object: str, property: str)->bool
        Returns True if the property of the object is met, and False otherwise.
    simple_query(question: str=None)->str
        Returns the answer to a basic question asked about the image. 
    compute_depth()->float
        Returns the median depth of the image crop.
    crop(left: int, lower: int, right: int, upper: int)->ImagePatch
        Returns a new ImagePatch object containing a crop of the image at the given coordinates.
    """

def bool_to_yesno(bool_answer: bool) -> str:
    return "yes" if bool_answer else "no"

def yesno_to_bool(str_answer: str) -> bool:
    return True if str_answer=="yes" else False

def coerce_to_numeric(string):
    """
    This function takes a string as input and returns a float after removing any non-numeric characters.
    If the input string contains a range (e.g. "10-15"), it returns the first value in the range.
    """
    return coerce_to_numeric(string)

Write a function using Python and the ImagePatch class (above) that could be executed to provide an answer to the query. 

You will be given some examples:

Examples:
Example 1: 
# Is it true that there is at least 1 image that contains exactly 2 pillows that are on sofa that is near wood table?
def execute_command(image_list) -> str:
    count = 0
    for image in image_list:
        image_patch = ImagePatch(image)
        pillows_exist = image_patch.simple_query("Are there any pillows?")
        if pillows_exist == "yes":
            pillows_patches = image_patch.find("pillow")
            if len(pillows_patches) == 2:
                sofa_exists = image_patch.simple_query("Is there a sofa?")
                if sofa_exists == "yes":
                    table_exists = image_patch.simple_query("Is there a wood table?")
                        if table_exists == "yes":
                            count += 1
    if count >= 1:
        return "yes"
    else:    
        return "no"

Example 2:
# Is the train brown or red?
def execute_command(image_list) -> str:
    for image in images:
        image_patch = ImagePatch(image)
        train_exists = image_patch.simple_query("Is there a train?")
        if train_exists == "yes":
            train_patch = image_patch.find("train")[0]
            is_brown = train_patch.verify_property("train", "brown")
            is_red = train_patch.verify_property("train", "red")
            if is_brown and not is_red:
                return "brown"
            elif is_red and not is_brown:
                return "red"
    # If not found, directly query the first image
    image_patch = ImagePatch(image_list[0])
    return image_patch.simple_query("Is the train brown or red?")

Example 3:
# Is the train that is near a dirt blue?
def execute_command(image_list) -> str:
    for image in images:
        image_patch = ImagePatch(image)
        exists_train_near_dirt = image_patch.simple_query("Is there a train near dirt?")
        if 'yes' == exists_train_near_dirt:
            if 'yes' == image_patch.simple_query("Is the train blue?"):
                return 'yes'
    return 'no'

Example 4:
# The river with train tracks near it are near a river or a mud?
def execute_command(image_list) -> str:
    for image in images:
        image_patch = ImagePatch(image)
        exists_river_near_train_track = image_patch.simple_query("Is there a river with train tracks near it?")
        if 'yes' == exists_river_near_train_track:
            river_nearby = image_patch.simple_query(""Is there a river nearby?"")
            mud_nearby = image_patch.simple_query(""Is there mud nearby?"")
            if river_nearby == 'yes':
                return "river"
            elif mud_nearby == 'yes':
                return "mud"
    # If not found, directly query the first image
    image_patch = ImagePatch(image_list[0])
    return image_patch.simple_query("The river with train tracks near it are near a river or a mud?")

Example 5:
# Is it true that there is at least 1 image that contains exactly 2 sheep that are behind fence?
def execute_command(image_list) -> str:
    count = 0
    for image in image_list:
        image_patch = ImagePatch(image)
        sheep_patches = image_patch.find("sheep")
        behind_fence_sheep_num = 0
        for sheep_patch in sheep_patches:
            if sheep_patch.simple_query("Is this sheep behind the fence?") == "yes":
                behind_fence_sheep_num += 1
        if behind_fence_sheep_num == 2:
            count += 1
    if count >= 1:
        return "yes"
    return "no"

Example 6:
# There are more images with a man that is wearing a blue shirt than images with man that is standing in blue shirt
def execute_command(image_list) -> str:
    man_wearing_blue_shirt_num = 0
    for image in image_list:
        image_patch = ImagePatch(image)
        man_patches = image_patch.find("man")
        for man_patch in man_patches:
            if man_patch.simple_query("Is the man wearing a blue shirt?") == "yes":
                man_wearing_blue_shirt_num += 1
                break
    man_standing_in_blue_shirt_num = 0
    for image in image_list:
        image_patch = ImagePatch(image)
        man_patches = image_patch.find("man")
        for man_patch in man_patches:
            if man_patch.simple_query("Is the man wearing a blue shirt?") == "yes":
                if man_patch.simple_query("Is the man standing?") == "yes":
                    man_standing_in_blue_shirt_num += 1
                    break
    if man_wearing_blue_shirt_num > man_standing_in_blue_shirt_num:
        return "yes"
    else:
        return "no"

Example 7:
# There are less women that are slipping onto land than men that are slipping onto land
def execute_command(image_list) -> str:
    women_slipping_num = 0
    for image in image_list:
        image_patch = ImagePatch(image)
        woman_patches = image_patch.find("woman")
        for woman_patch in woman_patches:
            if woman_patch.simple_query("Is this woman slipping onto sand?") == "yes":
                women_slipping_num += 1
    men_slipping_num = 0
    for image in image_list:
        image_patch = ImagePatch(image)
        man_patches = image_patch.find("man")
        for man_patch in man_patches:
            if man_patch.simple_query("Is this man slipping onto sand?") == "yes":
                men_slipping_num += 1
    # Indeed less women than man that are slipping
    if women_slipping_num < men_slipping_num:
        return "yes"
    else:
        return "no"

Example 8:
# Is there both a giraffe that is in a field and is behind a bush and a giraffe that is in a pen and is behind a rhino?
def execute_command(image_list) -> str:
    giraffe_infield_behindbush = False
    for image in image_list:
        image_patch = ImagePatch(image)
        giraffe_patches = image_patch.find("giraffe")
        for giraffe_patch in giraffe_patches:
            if giraffe_patch.simple_query("Is this giraffe in a field?") == "yes":
                if giraffe_patch.simple_query("Is this giraffe behind a bush?") == "yes":
                    giraffe_infield_behindbush = True
    giraffe_inpen_behindrhino = False
    for image in image_list:
        image_patch = ImagePatch(image)
        giraffe_patches = image_patch.find("giraffe")
        for giraffe_patch in giraffe_patches:
            if giraffe_patch.simple_query("Is this giraffe in a pen?") == "yes":
                if giraffe_patch.simple_query("Is this giraffe behind a rhino?") == "yes":
                    giraffe_inpen_behindrhino = True
    if giraffe_infield_behindbush and giraffe_inpen_behindrhino:
        return "yes"
    else:
        return "no"

Don't return long strings like "unknown", "I don't know" "doesn't exist"!!! If such thing happens, you should instead use image_patch.simple_query(query) as the last returning logic.
Now, Only answer with a single function starting def execute_command!

- Only uses the provided APIs!!
- Make sure to return a short answer!! Like return "car" instead of "the car"/'a car'
- Never return 'unknown'

# INSERT_QUERY_HERE
